/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;



import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author idiotbox
 */
public class baseApp extends javax.swing.JFrame {
    private final JTextField filename = new JTextField(), dir = new JTextField();
    protected String plainFilePath = null;
    protected File plainFile = null;
    private PublicKey publicKeyRSA;
    private PrivateKey privateKeyRSA;
    private SecretKeySpec publicKeyDES;
    private int size;
    
    /**
     * Creates new form baseApp
     */
    public baseApp() {
        
        initComponents();
        this.setLocationRelativeTo(null);
        dir.setEditable(false);
        filename.setEditable(false);
        radioGroup();
        radioAES.setSelected(true);
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        radioAES = new javax.swing.JRadioButton();
        radioDES = new javax.swing.JRadioButton();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        lblFileName = new javax.swing.JLabel();
        lblClose = new javax.swing.JLabel();
        lblTimeTaken = new javax.swing.JLabel();
        radioRSA = new javax.swing.JRadioButton();
        btnClear = new javax.swing.JButton();
        radioBlowFish = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(java.awt.Color.gray);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        basePanel.setBackground(java.awt.Color.gray);

        jLabel1.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Select File :");

        jLabel2.setFont(new java.awt.Font("Century Schoolbook L", 1, 36)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Encryption App");

        jLabel3.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Encryption Type :");

        radioAES.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        radioAES.setForeground(java.awt.Color.white);
        radioAES.setText("AES");

        radioDES.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        radioDES.setForeground(java.awt.Color.white);
        radioDES.setText("DES");

        btnEncrypt.setFont(new java.awt.Font("Century Schoolbook L", 1, 24)); // NOI18N
        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setFont(new java.awt.Font("Century Schoolbook L", 1, 24)); // NOI18N
        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse File...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/delete-filled.png"))); // NOI18N
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
        });

        radioRSA.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        radioRSA.setForeground(java.awt.Color.white);
        radioRSA.setText("RSA");

        btnClear.setFont(new java.awt.Font("Century Schoolbook L", 1, 24)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        radioBlowFish.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        radioBlowFish.setForeground(java.awt.Color.white);
        radioBlowFish.setText("Blow Fish");

        javax.swing.GroupLayout basePanelLayout = new javax.swing.GroupLayout(basePanel);
        basePanel.setLayout(basePanelLayout);
        basePanelLayout.setHorizontalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(basePanelLayout.createSequentialGroup()
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblClose))
                    .addGroup(basePanelLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel2))
                    .addGroup(basePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(basePanelLayout.createSequentialGroup()
                                .addComponent(btnEncrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDecrypt))
                            .addGroup(basePanelLayout.createSequentialGroup()
                                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblFileName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBrowse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, basePanelLayout.createSequentialGroup()
                                        .addComponent(radioAES)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radioDES)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioRSA))
                            .addComponent(lblTimeTaken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClear)
                            .addComponent(radioBlowFish))))
                .addContainerGap())
        );

        basePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDecrypt, btnEncrypt});

        basePanelLayout.setVerticalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblClose)
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDES)
                    .addComponent(radioAES)
                    .addComponent(jLabel3)
                    .addComponent(radioRSA)
                    .addComponent(radioBlowFish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncrypt)
                    .addComponent(btnDecrypt)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTimeTaken, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        basePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel3, radioAES, radioBlowFish, radioDES, radioRSA});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioGroup(){
        ButtonGroup sb = new ButtonGroup();
        sb.add(radioAES);
        sb.add(radioDES);
        sb.add(radioRSA);
        sb.add(radioBlowFish);
    
    }
    
    
    private void rsaKeyGenerator(){
        try {
            KeyPairGenerator kpgRSA = KeyPairGenerator.getInstance("RSA");
            kpgRSA.initialize(2048);
            KeyPair keyPariRSA = kpgRSA.generateKeyPair();
            publicKeyRSA = keyPariRSA.getPublic();
            privateKeyRSA = keyPariRSA.getPrivate();
            
            Key k = KeyGenerator.getInstance("DES").generateKey();
            byte [] raw = k.getEncoded();
            publicKeyDES = new SecretKeySpec(raw, "DES");
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(baseApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void encType(int ciphermode, Key accessKey, SecretKeySpec secKey){
        JFileChooser c = new JFileChooser();
        int rVal = c.showSaveDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(c.getSelectedFile().getName());
        dir.setText(c.getCurrentDirectory().toString());
        plainFilePath = dir.getText()+"/"+filename.getText();
        
        if (plainFilePath != null){
            long startTime; 
            long endTime;   
            double time;   
         
        startTime = System.currentTimeMillis();
	
                if(radioAES.isSelected()){
                    String key = "This is a secret";
                    Crypto.fileProcessorAES(ciphermode, key, plainFile, new File(plainFilePath));
                }else if(radioDES.isSelected()){
                    Crypto.fileProcessorDES(ciphermode, secKey, plainFile, new File(plainFilePath));
                }else if(radioRSA.isSelected()){
                    Crypto.fileProcessorRSA(ciphermode, accessKey, plainFile, new File(plainFilePath));
                }else{
                    String keyString = "DesireSecretKey";
                    Crypto.fileProcessorBlowFish(ciphermode, keyString, plainFile, new File(plainFilePath));
                }
                            
            endTime = System.currentTimeMillis();
            time = (endTime - startTime) / 1000.0;
            lblTimeTaken.setText("Encryption Time ; " +Double.toString(time));
        }
      }
      if (rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText("You pressed cancel");
        dir.setText("");
      }
    }
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
       JFileChooser plainFileChooser = new JFileChooser();
       int rVal = plainFileChooser.showSaveDialog(this);
      if (rVal == JFileChooser.APPROVE_OPTION) {
          plainFile = plainFileChooser.getSelectedFile();
          size = (int) plainFile.length() / 1024;
           lblFileName.setText(plainFileChooser.getSelectedFile().getName()+"  "+size+ "  kb");
           if((size*1024)>1960){
               radioRSA.setEnabled(false);
           }
            
              }
      if (rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText("You pressed cancel");
        dir.setText("");
      }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        rsaKeyGenerator();
        
        if(radioRSA.isSelected()||radioDES.isSelected()){
            try {
                String key64;
                if(radioRSA.isSelected()){
                    encType(Cipher.ENCRYPT_MODE,publicKeyRSA,null);
                    KeyFactory fact = KeyFactory.getInstance("RSA");
                    PKCS8EncodedKeySpec spec = fact.getKeySpec(privateKeyRSA,PKCS8EncodedKeySpec.class);
                    byte[] packed = spec.getEncoded();
                    key64 = Base64.getEncoder().encodeToString(packed);
                    
                }else{
                    encType(Cipher.ENCRYPT_MODE,null,publicKeyDES);
                    key64 = Base64.getEncoder().encodeToString(publicKeyDES.getEncoded());
                }
                
                JOptionPane.showMessageDialog(null, new JTextArea(key64), "Private Key", JOptionPane.INFORMATION_MESSAGE);
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(baseApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            encType(Cipher.ENCRYPT_MODE, null, null);
        }
        
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        if(radioRSA.isSelected()||radioDES.isSelected()){
            try {
                String keyString = JOptionPane.showInputDialog("Enter Private Key");
                                
                if(radioRSA.isSelected()){
                    byte[] clear = Base64.getDecoder().decode(keyString);
                    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(clear);
                    KeyFactory fact = KeyFactory.getInstance("RSA");
                    PrivateKey key = fact.generatePrivate(keySpec);
                    encType(Cipher.DECRYPT_MODE,key,null);
                }else{
                    byte[] decodedKey = Base64.getDecoder().decode(keyString);
                    SecretKeySpec key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "DES");
                    encType(Cipher.DECRYPT_MODE,null,key);
                }
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(baseApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            encType(Cipher.DECRYPT_MODE,null,null);
        }
        
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       plainFile = null;
       plainFilePath = null;
       lblFileName.setText("");
       lblTimeTaken.setText("");
       publicKeyRSA = null;
       privateKeyRSA = null;
       radioAES.setSelected(true);
       size = 0;
       radioRSA.setEnabled(true);
    }//GEN-LAST:event_btnClearActionPerformed

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
       this.setDefaultCloseOperation(EXIT_ON_CLOSE);
       WindowEvent winClosingEvent = new WindowEvent(SwingUtilities.getWindowAncestor(basePanel), WindowEvent.WINDOW_CLOSING);
       Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }//GEN-LAST:event_lblCloseMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(baseApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(baseApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(baseApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(baseApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new baseApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel basePanel;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblTimeTaken;
    private javax.swing.JRadioButton radioAES;
    private javax.swing.JRadioButton radioBlowFish;
    private javax.swing.JRadioButton radioDES;
    private javax.swing.JRadioButton radioRSA;
    // End of variables declaration//GEN-END:variables
}
